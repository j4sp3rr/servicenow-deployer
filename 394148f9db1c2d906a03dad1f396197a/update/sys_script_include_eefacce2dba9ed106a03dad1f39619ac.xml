<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_deployer.SourceControlAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The class acts as an interface to source control repositories in GitHub or GitLab.&#13;
AzureDevOps support has been added as an experimental (and not yet fully tested) feature.
|
Methods:
* initialize()
* GetRequestCount()
* Error()
* ParseRepoUrl()
* GetBranchesFromRepo()
* GetFilesFromRepo()
* GetFileContent()
* GetPackageRecordFromRepo()
* GetDependencyRecordsFromRepo()
* GetSysDBObjectRecordsFromRepo()
* GetSysDictionaryRecordsFromRepo()
* ProtectBranchReadOnly()</description>
        <mobile_callable>false</mobile_callable>
        <name>SourceControlAPI</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var SourceControlAPI = Class.create();
SourceControlAPI.prototype = {
	
    initialize: function()
	{
		this.m_nRequestCount = 0;
		this.m_cache = new x_snc_devtools.TransactionCacheAPI('SOURCE_CONTROL_API');
    },
	
	GetRequestCount: function()
	{
		return this.m_nRequestCount;
	},
	
	Error: function(strMessage)
	{
		LogError('SourceControlAPI: ERROR: '+strMessage);
	},
	
	ParseRepoUrl: function(strRepoUrl)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		var StringReplace = x_snc_devtools.StringReplace;
		var StringFind = x_snc_devtools.StringFind;
		var StringStripTrailingSlash = x_snc_devtools.StringStripTrailingSlash;
		
		var strRepoType = GetRepositoryType(strRepoUrl);
		switch (strRepoType)
		{
			case 'github':

				var strRepoPath = StringReplace(strRepoUrl,'https://','');
				strRepoPath = StringReplace(strRepoPath,'.git','');
				strRepoPath = StringStripTrailingSlash(strRepoPath);
				var nFirstSlash = StringFind(strRepoPath,'/');
				strRepoPath = strRepoPath.substring(nFirstSlash+1);
				
				var aComponents = strRepoPath.split('/');
				if (aComponents.length < 2)
				{
					return false;
				}
				var result = {};
				result['repo'] = aComponents[aComponents.length-1];
				result['owner'] = aComponents[aComponents.length-2];
				result['api_url'] = GetRepositoryApiUrl(strRepoUrl);
				return result;
				
			case 'gitlab':
				
				var strProject = StringReplace(strRepoUrl,'https://','');
				strProject = StringReplace(strProject,'.git','');
				strProject = StringStripTrailingSlash(strProject);
				var nFirstSlash = StringFind(strProject,'/');
				strProject = strProject.substring(nFirstSlash+1);
				var result = {};
				result['project'] = strProject;
				result['api_url'] = GetRepositoryApiUrl(strRepoUrl);
				return result;	

			case 'azuredevops':

				var strRepoPath = StringReplace(strRepoUrl,'https://','');
				strRepoPath = StringReplace(strRepoPath,'.git','');
				strRepoPath = StringStripTrailingSlash(strRepoPath);
				var nFirstSlash = StringFind(strRepoPath,'/');
				strRepoPath = strRepoPath.substring(nFirstSlash+1);
				
				var aComponents = strRepoPath.split('/');
				if (aComponents.length < 4)
				{
					return false;
				} 

				var strOrganization = aComponents[aComponents.length-4];
				strOrganization = decodeURIComponent(strOrganization);

				var strProject = aComponents[aComponents.length-3];
				strProject = decodeURIComponent(strProject);

				var strRepo = aComponents[aComponents.length-1];
				strRepo = decodeURIComponent(strRepo);				

				var result = {};
				result['organization'] = strOrganization;
				result['project'] = strProject;
				result['repo'] = strRepo;
				result['api_url'] = GetRepositoryApiUrl(strRepoUrl);
				return result;							
				
			default:
				return false;
		}	
		
	},
	
	GetBranchesFromRepo: function(strRepoUrl)
	{
		var GetValue = x_snc_devtools.GetValue;
		var StringReplace = x_snc_devtools.StringReplace;
		var GetArrayValue = x_snc_devtools.GetArrayValue;
		
		var aBranches = this.m_cache.GetItem('GetBranchesFromRepo'+strRepoUrl);
		if (aBranches != null)
		{
			return aBranches;
		}
		
		var strRepoType = GetRepositoryType(strRepoUrl);
		
		if (strRepoType == false)
		{
			return false;
		}
		
		var grRepoCredential = GetRepositoryCredentialRecord(strRepoUrl);
		if (grRepoCredential == false)
		{
			return false;
		}		
		
		switch (strRepoType)
		{
			case 'github':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOwner = GetValue(parsed,'owner');
				var strRepo = GetValue(parsed,'repo');
				
				var github = new x_snc_devtools.GitHubAPI();
				
				github.SetCredential(grRepoCredential.credential);
				github.SetMidServer(grRepoCredential.mid_server.name);
				github.SetApiUrl(GetValue(parsed,'api_url'));

				var aBranches = github.GetBranchesFromRepo(strOwner,strRepo);
				
				var aResult = [];
				
				for (var nBranch = 0; nBranch < aBranches.length; nBranch++)
				{
					aResult.push(GetValue(aBranches,nBranch,'name'));
				}
				
				this.m_nRequestCount += github.GetRequestCount();
				
				this.m_cache.SetItem('GetBranchesFromRepo'+strRepoUrl,aResult);
				return aResult;
				
			case 'gitlab':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strProject = GetValue(parsed,'project');
				
				var gitlab = new x_snc_devtools.GitLabAPI();
				gitlab.SetCredential(grRepoCredential.credential);
				gitlab.SetMidServer(grRepoCredential.mid_server.name);
				gitlab.SetApiUrl(GetValue(parsed,'api_url'));

				var aBranches = gitlab.GetBranchesFromRepo(strProject);
				
				var aResult = [];
				
				for (var nBranch = 0; nBranch < aBranches.length; nBranch++)
				{
					aResult.push(GetValue(aBranches,nBranch,'name'));
				}
				
				this.m_nRequestCount += gitlab.GetRequestCount();

				this.m_cache.SetItem('GetBranchesFromRepo'+strRepoUrl,aResult);
				return aResult;				

			case 'azuredevops':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOrganization = GetValue(parsed,'organization');
				var strProject = GetValue(parsed,'project');
				var strRepo = GetValue(parsed,'repo');
				
				var azuredevops = new x_snc_devtools.AzureDevOpsAPI();
				azuredevops.SetCredential(grRepoCredential.credential);
				azuredevops.SetMidServer(grRepoCredential.mid_server.name);
				azuredevops.SetApiUrl(GetValue(parsed,'api_url'));

				var branches = azuredevops.GetBranchesFromRepo(strOrganization,strProject,strRepo);
				var aBranches = GetArrayValue(GetValue(branches,'value'));

				var aResult = [];
				
				for (var nBranch = 0; nBranch < aBranches.length; nBranch++)
				{
					var strName = GetValue(aBranches,nBranch,'name');
					strBranch = StringReplace(strName,'refs/heads/','');
					aResult.push(strBranch);
				}
				
				this.m_nRequestCount += azuredevops.GetRequestCount();

				this.m_cache.SetItem('GetBranchesFromRepo'+strRepoUrl,aResult);
				return aResult;								
				
			default:
				this.m_cache.SetItem('GetBranchesFromRepo'+strRepoUrl,false);
				return false;
		}
				
		
	},
	
	GetFilesFromRepo: function(strRepoUrl,strBranch,strPath)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		var GetValue = x_snc_devtools.GetValue;
		var GetArrayValue = x_snc_devtools.GetArrayValue;

		strRepoUrl = GetStringValue(strRepoUrl);
		strBranch = GetStringValue(strBranch);
		strPath = GetStringValue(strPath);
		if (strPath == '')
		{
			strPath = '/';
		}	
		
		var aFiles = this.m_cache.GetItem('GetFilesFromRepo'+strRepoUrl+strBranch+strPath);
		if (aFiles != null)
		{
			return aFiles;
		}
				
		var strRepoType = GetRepositoryType(strRepoUrl);
		if (strRepoType == false)
		{
			return false;
		}
		
		var grRepoCredential = GetRepositoryCredentialRecord(strRepoUrl);
		if (grRepoCredential == false)
		{
			return false;
		}	
			
		switch (strRepoType)
		{
			case 'github':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOwner = GetValue(parsed,'owner');
				var strRepo = GetValue(parsed,'repo');
				
				var github = new x_snc_devtools.GitHubAPI();
				github.SetCredential(grRepoCredential.credential);
				github.SetMidServer(grRepoCredential.mid_server.name);
				github.SetApiUrl(GetValue(parsed,'api_url'));

				var aFiles = github.GetFilesFromBranch(strOwner,strRepo,strBranch,strPath);
				
				this.m_nRequestCount += github.GetRequestCount();
				
				this.m_cache.SetItem('GetFilesFromRepo'+strRepoUrl+strBranch+strPath,aFiles);
				return aFiles;
				
			case 'gitlab':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strProject = GetValue(parsed,'project');
				
				var gitlab = new x_snc_devtools.GitLabAPI();
				gitlab.SetCredential(grRepoCredential.credential);
				gitlab.SetMidServer(grRepoCredential.mid_server.name);
				gitlab.SetApiUrl(GetValue(parsed,'api_url'));

				var aFiles = gitlab.GetFilesFromBranch(strProject,strBranch,''); 

				this.m_nRequestCount += gitlab.GetRequestCount();
				
				this.m_cache.SetItem('GetFilesFromRepo'+strRepoUrl+strBranch+strPath,aFiles);
				return aFiles;	


			case 'azuredevops':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOrganization = GetValue(parsed,'organization');
				var strProject = GetValue(parsed,'project');
				var strRepo = GetValue(parsed,'repo');
				
				var azuredevops = new x_snc_devtools.AzureDevOpsAPI();
				azuredevops.SetCredential(grRepoCredential.credential);
				azuredevops.SetMidServer(grRepoCredential.mid_server.name);
				azuredevops.SetApiUrl(GetValue(parsed,'api_url'));

				var aFiles = azuredevops.GetFilesFromBranch(
					strOrganization,
					strProject,
					strRepo,
					strBranch,'');

				this.m_nRequestCount += azuredevops.GetRequestCount();
				this.m_cache.SetItem('GetFilesFromRepo'+strRepoUrl+strBranch+strPath,aFiles);

				return aFiles;						

				
			default:
				this.m_cache.SetItem('GetFilesFromRepo'+strRepoUrl+strBranch+strPath,false);
				return false;
		}
		
	},
	
	GetFileContent: function(strRepoUrl,strBranch,strPath)
	{
		var GetValue = x_snc_devtools.GetValue;

		var strContent = this.m_cache.GetItem('GetFileContent'+strRepoUrl+strBranch+strPath);
		if (strContent != null)
		{
			return strContent;
		}			
		
		var strRepoType = GetRepositoryType(strRepoUrl);
		if (strRepoType == false)
		{
			return false;
		}
		
		var grRepoCredential = GetRepositoryCredentialRecord(strRepoUrl);
		if (grRepoCredential == false)
		{
			return false;
		}	
			
		switch (strRepoType)
		{
			case 'github':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOwner = GetValue(parsed,'owner');
				var strRepo = GetValue(parsed,'repo');
				
				var github = new x_snc_devtools.GitHubAPI();
				github.SetCredential(grRepoCredential.credential);
				github.SetMidServer(grRepoCredential.mid_server.name);
				github.SetApiUrl(GetValue(parsed,'api_url'));

				var file = github.GetFile(strOwner,strRepo,strBranch,strPath);
				
				this.m_nRequestCount += github.GetRequestCount();
				
				if (file == false)
				{
					return false;
				}				
				
				var strContent = GetValue(file,'content');
				this.m_cache.SetItem('GetFileContent'+strRepoUrl+strBranch+strPath,strContent);
				return strContent;
				
			case 'gitlab':
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strProject = GetValue(parsed,'project');
				
				var gitlab = new x_snc_devtools.GitLabAPI();
				gitlab.SetCredential(grRepoCredential.credential);
				gitlab.SetMidServer(grRepoCredential.mid_server.name);
				gitlab.SetApiUrl(GetValue(parsed,'api_url'));

				var file = gitlab.GetFile(strProject,strBranch,strPath);
				
				this.m_nRequestCount += gitlab.GetRequestCount();
				
				if (file == false)
				{
					return false;
				}
								
				var strContent = GetValue(file,'content');
				this.m_cache.SetItem('GetFileContent'+strRepoUrl+strBranch+strPath,strContent);
				return strContent;			
				
			case 'azuredevops':
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOrganization = GetValue(parsed,'organization');
				var strProject = GetValue(parsed,'project');
				var strRepo = GetValue(parsed,'repo');
				
				var azuredevops = new x_snc_devtools.AzureDevOpsAPI();
				azuredevops.SetCredential(grRepoCredential.credential);
				azuredevops.SetMidServer(grRepoCredential.mid_server.name);
				azuredevops.SetApiUrl(GetValue(parsed,'api_url'));

				var strContent = azuredevops.GetFile(
					strOrganization,
					strProject,
					strRepo,
					strBranch,
					strPath);
				
				this.m_nRequestCount += azuredevops.GetRequestCount();
				
				if (strContent == false)
				{
					return false;
				}
								
				this.m_cache.SetItem('GetFileContent'+strRepoUrl+strBranch+strPath,strContent);
				return strContent;	

			default:
				this.m_cache.SetItem('GetFileContent'+strRepoUrl+strBranch+strPath,false);
				return false;
		}
		
	},	
	
	GetPackageRecordFromRepo: function(strRepoUrl,strBranch)
	{
		var Base64Decode = x_snc_devtools.Base64Decode;
		var ParseXml = x_snc_devtools.ParseXml;
		var GetValue = x_snc_devtools.GetValue;
		var IsObject = x_snc_devtools.IsObject;

		var aFiles = this.GetFilesFromRepo(strRepoUrl,strBranch);
		if (aFiles == false)
		{
			return false;
		}
		
		for (var nFile = 0; nFile < aFiles.length; nFile++)
		{
			var strPath = aFiles[nFile];
		
			if (   strPath.indexOf('update/') == -1
				&& strPath.indexOf('author_elective_update/') == -1)
			{
				if (strPath.indexOf('sys_app_') == 0 || strPath.indexOf('/sys_app_') != -1)
				{
					var strContent = this.GetFileContent(strRepoUrl,strBranch,strPath);
					if (strContent == false)
					{
						return false;
					}

					var strXml = strContent;
					if (strXml.indexOf('<?xml') == -1)
					{
						strXml = Base64Decode(strContent);
					}
					var xml = ParseXml(strXml);
					packageRecord = GetValue(xml,'record_update','sys_app');
					if (IsObject(packageRecord))
					{
						return packageRecord;
					}
				}
			}
		}
		return false;
	},

	GetDependencyRecordsFromRepo: function(strRepoUrl,strBranch)
	{
		var Base64Decode = x_snc_devtools.Base64Decode;
		var ParseXml = x_snc_devtools.ParseXml;
		var GetValue = x_snc_devtools.GetValue;
		var SetValue = x_snc_devtools.SetValue;
		var GetStringValue = x_snc_devtools.GetStringValue;	
		var IsValidSysId = x_snc_devtools.IsValidSysId;
		var Clone = x_snc_devtools.Clone;
		var IsObject = x_snc_devtools.IsObject;
		
		var aFiles = this.GetFilesFromRepo(strRepoUrl,strBranch);
		if (aFiles == false)
		{
			return false;
		}
		
		var aDependencies = [];
		
		for (var nFile = 0; nFile < aFiles.length; nFile++)
		{
			var strPath = aFiles[nFile];
			
			if (   strPath.indexOf('/x_snc_devtools_dependency_') != -1
				&& strPath.indexOf('author_elective_update/') == -1)
			{
				var strContent = this.GetFileContent(strRepoUrl,strBranch,strPath);
				if (strContent == false)
				{
					return false;
				}
				var strXml = Base64Decode(strContent);
				var dependencyRecord = ParseXml(strXml);
				dependencyRecord = GetValue(dependencyRecord,'record_update','x_snc_devtools_dependency');
				if (IsObject(dependencyRecord) == true)
				{
					var strDependencySysId = GetStringValue(GetValue(dependencyRecord,'dependency','content'));
					if (IsValidSysId(strDependencySysId) == true)
					{
						dependencyRecord = SetValue(strDependencySysId,dependencyRecord,'dependency');
					}
					aDependencies.push(Clone(dependencyRecord));
				}
			}
			
		}
		return aDependencies;
	},

	GetSysDBObjectRecordsFromRepo: function(strRepoUrl,strBranch)
	{
		var Base64Decode = x_snc_devtools.Base64Decode;
		var ParseXml = x_snc_devtools.ParseXml;
		var GetValue = x_snc_devtools.GetValue;
		var IsObject = x_snc_devtools.IsObject;
		
		var aFiles = this.GetFilesFromRepo(strRepoUrl,strBranch);
		if (aFiles == false)
		{
			return false;
		}
		
		var aSysDBObjects = [];
		
		for (var nFile = 0; nFile < aFiles.length; nFile++)
		{
			var strPath = aFiles[nFile];
			
			if (   strPath.indexOf('/sys_db_object_') != -1
				&& strPath.indexOf('author_elective_update/') == -1)
			{
				var strContent = this.GetFileContent(strRepoUrl,strBranch,strPath);
				if (strContent == false)
				{
					return false;
				}
				var strXml = Base64Decode(strContent);
				var sysDBObjectRecord = ParseXml(strXml);
				sysDBObjectRecord = GetValue(sysDBObjectRecord,'record_update','sys_db_object');
				if (IsObject(sysDBObjectRecord) == true)
				{
					aSysDBObjects.push(CleanUpSysDBObjectObject(sysDBObjectRecord));
				}
			}
			
		}
		return aSysDBObjects;
	},
	
	GetSysDictionaryRecordsFromRepo: function(strRepoUrl,strBranch)
	{
		var Base64Decode = x_snc_devtools.Base64Decode;
		var ParseXml = x_snc_devtools.ParseXml;
		var GetValue = x_snc_devtools.GetValue;
		var IsObject = x_snc_devtools.IsObject;
		var IsArray = x_snc_devtools.IsArray;
		
		var aFiles = this.GetFilesFromRepo(strRepoUrl,strBranch);
		if (aFiles == false)
		{
			return false;
		}
		
		var aSysDictionary = [];
		
		for (var nFile = 0; nFile < aFiles.length; nFile++)
		{
			var strPath = aFiles[nFile];
			
			if (   strPath.indexOf('/sys_dictionary_') != -1
				&& strPath.indexOf('author_elective_update/') == -1)
			{
				var strContent = this.GetFileContent(strRepoUrl,strBranch,strPath);
				if (strContent == false)
				{
					return false;
				}
				var strXml = Base64Decode(strContent);
				var sysDictionaryRecord = ParseXml(strXml);
				sysDictionaryRecord = GetValue(sysDictionaryRecord,'record_update','sys_dictionary');
				if (IsObject(sysDictionaryRecord) == true)
				{
					delete sysDictionaryRecord.table;
					var vElement = GetValue(sysDictionaryRecord,'element');
					if (IsArray(vElement))
					{
						sysDictionaryRecord['element'] = GetValue(vElement,0);
					}
					if (GetValue(sysDictionaryRecord,'internal_type','content') != 'collection')
					{
						aSysDictionary.push(CleanUpSysDictionaryObject(sysDictionaryRecord));
					}
				}
			}
			
		}
		return aSysDictionary;
	},


	ProtectBranchReadOnly: function(strRepoUrl,strBranch)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		var GetValue = x_snc_devtools.GetValue;

		strRepoUrl = GetStringValue(strRepoUrl);
		strBranch = GetStringValue(strBranch);

		var strRepoType = GetRepositoryType(strRepoUrl);
		if (strRepoType == false)
		{
			return false;
		}
		
		var grRepoCredential = GetRepositoryCredentialRecord(strRepoUrl);
		if (grRepoCredential == false)
		{
			return false;
		}	
			
		switch (strRepoType)
		{
			case 'github':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOwner = GetValue(parsed,'owner');
				var strRepo = GetValue(parsed,'repo');
				
				var github = new x_snc_devtools.GitHubAPI();
				github.SetCredential(grRepoCredential.credential);
				github.SetMidServer(grRepoCredential.mid_server.name);
				github.SetApiUrl(GetValue(parsed,'api_url'));

				var bResult = github.ProtectBranchReadOnly(strOwner,strRepo,strBranch);

				this.m_nRequestCount += github.GetRequestCount();

				return bResult;
				
			case 'gitlab':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strProject = GetValue(parsed,'project');
				
				var gitlab = new x_snc_devtools.GitLabAPI();
				gitlab.SetCredential(grRepoCredential.credential);
				gitlab.SetMidServer(grRepoCredential.mid_server.name);
				gitlab.SetApiUrl(GetValue(parsed,'api_url'));

				var bResult = gitlab.ProtectBranchReadOnly(strProject,strBranch);

				this.m_nRequestCount += gitlab.GetRequestCount();

				return bResult;

			case 'azuredevops':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOrganization = GetValue(parsed,'organization');
				var strProject = GetValue(parsed,'project');
				var strRepo = GetValue(parsed,'repo');
				
				var azuredevops = new x_snc_devtools.AzureDevOpsAPI();
				azuredevops.SetCredential(grRepoCredential.credential);
				azuredevops.SetMidServer(grRepoCredential.mid_server.name);
				azuredevops.SetApiUrl(GetValue(parsed,'api_url'));

				var bResult = azuredevops.ProtectBranchReadOnly(
					strOrganization,
					strProject,
					strRepo,
					strBranch);

				this.m_nRequestCount += azuredevops.GetRequestCount();

				return bResult;				
				
			default:
				return false;
		}
		
	},

		

    type: 'SourceControlAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-15 20:53:27</sys_created_on>
        <sys_id>eefacce2dba9ed106a03dad1f39619ac</sys_id>
        <sys_mod_count>150</sys_mod_count>
        <sys_name>SourceControlAPI</sys_name>
        <sys_package display_value="Deployer WORK IN PROGRESS" source="x_snc_deployer">394148f9db1c2d906a03dad1f396197a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Deployer WORK IN PROGRESS">394148f9db1c2d906a03dad1f396197a</sys_scope>
        <sys_update_name>sys_script_include_eefacce2dba9ed106a03dad1f39619ac</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-24 12:59:55</sys_updated_on>
    </sys_script_include>
</record_update>

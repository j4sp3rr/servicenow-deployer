<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_deployer.GetDeploymentTasks</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns the status object including the required deployment tasks based on the given status and instance objects.</description>
        <mobile_callable>false</mobile_callable>
        <name>GetDeploymentTasks</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function GetDeploymentTasks(vDeployment)
{
	var IsObject = x_snc_devtools.IsObject;
	var GetValue = x_snc_devtools.GetValue;
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var GetBoolValue = x_snc_devtools.GetBoolValue;
	var CompareVersion = x_snc_devtools.CompareVersion;
	var GetRecord = x_snc_devtools.GetRecord;
	var IsValidSysId = x_snc_devtools.IsValidSysId;
	var IsValidUrl = x_snc_devtools.IsValidUrl;
	var GetCleanAppName = x_snc_devtools.GetCleanAppName;

	var deployment = vDeployment;
	
	if (IsObject(vDeployment) == false)
	{
		deployment = GetRecord('x_snc_deployer_deployment',vDeployment);
	}
	
	if (IsObject(deployment) == false)
	{
		return false;
	}
	
	var instance = GetValue(deployment,'instance');
	if (IsValidSysId(instance))
	{
		instance = GetRecord('x_snc_deployer_instance',GetValue(deployment,'instance'));
	}
	
	if (IsObject(instance) == false)
	{
		return false;
	}
	
	var strInstanceName = GetStringValue(GetValue(instance,'name'));
	if (strInstanceName == '')
	{
		return false;
	}
	
	var strInstanceUrl = GetStringValue(GetValue(instance,'url'));
	if (IsValidUrl(strInstanceUrl) == false)
	{
		return false;
	}
	if (strInstanceUrl.endsWith('/') == false)
	{
		strInstanceUrl += '/';
	}
	
	var bCodeSanity = GetBoolValue(GetValue(instance,'codesanity'));
	var bDefaultATF = GetBoolValue(GetValue(instance,'atf_app_default'));
	var strDataDeletionPolicy = GetStringValue(GetValue(instance,'data_deletion_policy'));
	var bPreDeploymentActivities = GetBoolValue(GetValue(instance,'pre_deployment_activities'));
	var bPostDeploymentActivities = GetBoolValue(GetValue(instance,'post_deployment_activities'));
	var bSmokeTest = GetBoolValue(GetValue(instance,'smoke_test'));
	var strPlatformAppScope = GetStringValue(GetValue(instance,'platform_app_scope'));
	
	var bRefresh = GetBoolValue(GetValue(deployment,'refresh'));
	var bEnforceDowngrade = GetBoolValue(GetValue(deployment,'enforce_downgrade'));

	var bSkipCodeSanity = GetBoolValue(GetValue(deployment,'skip_codesanity'));
	var bSkipDefaultATF = GetBoolValue(GetValue(deployment,'skip_atf_app_default'));
	
	if (strDataDeletionPolicy == '')
	{
		strDataDeletionPolicy = 'deny';
	}
	
	var strPreferredExecution = GetStringValue(GetValue(deployment,'execution'));
	if (strPreferredExecution == '')
	{
		strPreferredExecution = 'manual';
	}
	
	function GetDeploymentTaskExecution(strAction)
	{
		if (strPreferredExecution == 'manual')
		{
			return 'manual';
		}
		return GetDeploymentTaskSupportedExecution(strAction);
	}
	
	function MakeTask(strAction,strId)
	{
		var task = {};
		task.action = strAction;
		task.execution = GetDeploymentTaskExecution(strAction);
		task.id = strId;
		return task;
	}
	
	if (bCodeSanity == true)
	{
		if (bSkipCodeSanity == true)
		{
			bCodeSanity = false;
		}
	}
	if (bDefaultATF == true)
	{
		if (bSkipDefaultATF == true)
		{
			bDefaultATF = false;
		}
	}	
	
	
	var aAppsOnTarget = TargetInstanceGetApplicationList(instance);
	
	var status = GetValue(deployment,'status');
	if (IsObject(status) == false)
	{
		status = GetLatestRepoDependencyStatus(GetValue(deployment,'repo_url'), GetValue(deployment,'version'));	
	}
	
	var aApps = GetArrayValue(GetValue(status,'list'));
	
	var aTasks = [];

	// Confirm Data Deletion
	var datadeletion = IdentifyDataDeletion(aAppsOnTarget,aApps);
	if (datadeletion == false)
	{
		var strMessage =
				'The Repository Application Status cannot be used for the deployment.\n'
				+ 'The Repository Application Status has been generated with Deployer version 1.8.0 or earlier.\n'
				+ 'Earlier versions did not gather the informaton required to identify potential data deletion.\n'
				+ 'Please create a new Repository Application Status using the same parameters!\n';
			gs.addErrorMessage(x_snc_devtools.HtmlEncode(strMessage));		
		return false;
	}
	
	
	if (GetValue(datadeletion,'datadeletion') == true)
	{
		var strDetails = 'The deployment will DELETE DATA on the target instance!\n';
		strDetails += '\n';

		var aSysDBObject = GetArrayValue(GetValue(datadeletion,'_sys_db_object'));
		if (aSysDBObject.length > 0)
		{
			strDetails = 'The following tables are going to be deleted:\n';
			for (var nObject = 0; nObject < aSysDBObject.length; nObject++)
			{
				var sysDBObject = aSysDBObject[nObject];
				strDetails += GetValue(sysDBObject,'name') + ' ("'+GetValue(sysDBObject,'label')+'")\n';
			}
			strDetails += '\n';
			strDetails += 'Deleting the records in these table(s) may lead to CASCADE DELETES of records in OTHER tables!\n';
			strDetails += 'Do NOT proceed if the impact of the pending table deletion is not fully understood!\n';
			strDetails += '\n';
		}

		var aSysDictionary = GetArrayValue(GetValue(datadeletion,'_sys_dictionary'));
		if (aSysDictionary.length > 0)
		{
			strDetails += 'The following columns are going to be deleted:\n';
			for (var nDictionary = 0; nDictionary < aSysDictionary.length; nDictionary++)
			{
				var sysDictionary = aSysDictionary[nDictionary];
				strDetails += GetValue(sysDictionary,'name') + '.'+GetValue(sysDictionary,'element')+' ("'+GetValue(sysDictionary,'column_label')+'")\n';
			}
			strDetails += '\n';
		}
		
		strDetails += 'If there are more recent versions installed on the target instance than those demanded by the Repository Application Status, there might be false positives.\n';

		if (strDataDeletionPolicy == 'deny')
		{
			var strMessage = 'THE DEPLOYMENT CANNOT PROCEED.\n'
				+ 'The data deletion policy of the target instance denies data deletion.\n\n'
				+ strDetails;
			gs.addErrorMessage(x_snc_devtools.HtmlEncode(strMessage));
			return false;
		}		
		
		//if (strDataDeletionPolicy == 'warn')
		//{
			var strMessage = 'WARNING: THE DEPLOYMENT WILL DELETE DATA!\n'
				+ '\n'
				+ strDetails;
			gs.addErrorMessage(x_snc_devtools.HtmlEncode(strMessage));
		//}		
		if (strDataDeletionPolicy == 'confirm')
		{
			var task = MakeTask('data_deletion_confirm');
			task.short_description = 'CONFIRM DATA DELETION';

			strDetails += '\n';
			strDetails += 'To proceed, a confirmation is required!\n';
			strDetails += '\n';
			strDetails += 'Mark the task as completed to confirm the deletion of all data contained in the listed tables and columns.\n';
			strDetails += '\n';
			strDetails += 'THIS CANNOT BE UNDONE!\n';

						
			task.description = strDetails;
			aTasks.push(task);				
		}
	}
	
	// Perform Pre Deployment Activities
	if (bPreDeploymentActivities == true)
	{
		var task = MakeTask('pre_deployment_activities');
		task.short_description = 'Pre-Deployment Activities';
		task.description = instance.pre_deployment_activities_instructions;
		aTasks.push(task);	
	}		
	
	// Install all applications
	
	// to capture the last app
	var app = {};
	for (var nApp = 0; nApp < aApps.length; nApp++)
	{
		app = aApps[nApp];
		var strClassName = GetStringValue(app.sys_class_name);
		var strPackageClass = GetStringValue(app.package_class);
		var strDependencyStatus = GetStringValue(app.dependency_status);
		if ( 	(strClassName == 'sys_app' || strPackageClass == 'sys_app')
			&& 	strDependencyStatus != 'out_of_scope')
		{
			// Check if the app already exists on the target instance:
			var appOnTargetFound = null;
			for (var nAppOnTarget = 0; nAppOnTarget < aAppsOnTarget.length; nAppOnTarget++)
			{
				var appOnTarget = aAppsOnTarget[nAppOnTarget];
				if (appOnTarget.sys_id == app.sys_id)
				{
					appOnTargetFound = appOnTarget;
					break;
				}
			}

		
			if (appOnTargetFound == null)
			{
				var strBranchInfo = '';
				if (app.version != app.branch)
				{
					strBranchInfo = ' from branch "'+app.branch+'"';
				}

				var task = MakeTask('install_import_from_source_control',app.sys_id);
				task.short_description = 'Install application "'+app.name+'" version "'+app.version+'" on instance "'+strInstanceName+'" via "Import From Source Control"'+strBranchInfo;
				
				if (task.execution == 'automatic')
				{
					var credential = TargetInstanceGetCredential(instance,app.x_snc_devtools_repo_url);
					if (credential == false)
					{
						task.execution = 'manual';
					}
					else
					{
						task.repo_url = app.x_snc_devtools_repo_url;
						task.branch = app.branch;
						task.credential = credential.credential;
						task.mid_server = credential.mid_server;
					}
				}

				if (task.execution == 'manual')
				{
					task.description =
						'1. Navigate to the instance: '+strInstanceUrl+'\n'
						+'2. Navigate to Studio\n'
						+'3. Select "Import from Source Control"\n'
						+'4. Enter as Repository URL: '+app.x_snc_devtools_repo_url+'\n'
						+'5. Select credential\n'
						+'6. Enter as branch: "'+app.branch+'"\n'
						+'7. Select MID server if required\n'
						+'8. Select "Import"\n';
					task.start_url = strInstanceUrl + '$studio.do';
				}

				
				aTasks.push(task);
			}
			else
			{
				if (appOnTarget.version == app.version)
				{
					if (bRefresh == true)
					{				
						var strBranchInfo = '';
						if (app.version != app.branch)
						{
							strBranchInfo = ' from branch "'+app.branch+'"';
						}		
						var task = MakeTask('install_apply_remote_changes',app.sys_id);
						task.short_description = 'Refresh application "'+app.name+'" in current version "'+app.version+'" on instance "'+strInstanceName+'" via "Apply Remote Changes"'+strBranchInfo;
						task.branch = GetStringValue(app.branch);
						aTasks.push(task);				
					}
				}
				else
				{
					if (CompareVersion(appOnTarget.version,app.version) < 1) // target is lower
					{
						if (app.branch == 'master')
						{
							var task = MakeTask('install_apply_remote_changes',app.sys_id);
							task.short_description = 'Update application "'+app.name+'" to version "'+app.version+'" (or higher) on instance "'+strInstanceName+'" via "Apply Remote Changes" from master branch.';
							task.branch = 'master';
							aTasks.push(task);			
						}
						else
						{
							var strBranchInfo = '';
							if (app.version != app.branch)
							{
								strBranchInfo = ' to "'+app.branch+'"';
							}								
							var task = MakeTask('install_switch_branch',app.sys_id);
							task.short_description = 'Update application "'+app.name+'" to version "'+app.version+'" on instance "'+strInstanceName+'" via "Switch Branch"'+strBranchInfo;
							task.branch = GetStringValue(app.branch);
							aTasks.push(task);
						}
					}
					else
					{
						if (bEnforceDowngrade == true)
						{
							var strBranchInfo = '';
							if (app.version != app.branch)
							{
								strBranchInfo = ' to "'+app.branch+'"';
							}								
							var task = MakeTask('install_switch_branch',app.sys_id);
							task.short_description = 'Downgrade application "'+app.name+'" to version "'+app.version+'" on instance "'+strInstanceName+'" via "Switch Branch"' + strBranchInfo;
							task.branch = GetStringValue(app.branch);
							aTasks.push(task);	
						}
					}
				}
			}
			
			
			if (bCodeSanity == true)
			{
				var task = MakeTask('run_codesanity',app.sys_id);
				task.short_description = 'Execute CodeSanity checks on application "'+app.name+'" on instance "'+strInstanceName+'"';
				aTasks.push(task);		
			}
		}
		
	}
	

	// Run installation scripts
	var strAppId = app.sys_id;
	var strShortDescription = '';
	if (strPlatformAppScope != '')
	{
		strAppId = strPlatformAppScope;
		strShortDescription = 'Run Installation scripts on instance "'+strInstanceName+'" (via API on platform app with scope "'+strPlatformAppScope+'")';
	}
	else
	{
		strShortDescription = 'Run Installation scripts on instance "'+strInstanceName+'" (via API on application "'+app.name+'")';
	}
	var task = MakeTask('run_install_scripts',strAppId);
	task.short_description = strShortDescription;
	aTasks.push(task);

	// Run application default ATF Test Suites
	if (bDefaultATF == true)
	{
		for (var nApp = 0; nApp < aApps.length; nApp++)
		{
			var app = aApps[nApp];

			var task = MakeTask('run_atf_test_suite',app.sys_id);
			task.short_description = 'Execute application default ATF Test Suite "'+app.name+'" on instance "'+strInstanceName+'" (if it exists)';
			aTasks.push(task);
		}
	}
	
	// Perform Smoke Test
	if (bSmokeTest == true)
	{
		var task = MakeTask('smoke_test');
		task.short_description = 'Perform Smoke Test on instance "'+strInstanceName+'"';
		task.description = instance.smoke_test_instructions;
		aTasks.push(task);	
	}
	
	// Perform Post Deployment Activities
	if (bPostDeploymentActivities == true)
	{
		var task = MakeTask('post_deployment_activities');
		task.short_description = 'Post-Deployment Activities';
		task.description = instance.post_deployment_activities_instructions;
		aTasks.push(task);	
	}	
	
	return aTasks;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-08-21 15:44:39</sys_created_on>
        <sys_id>ff67b1ed97707550a6a07767f053afca</sys_id>
        <sys_mod_count>124</sys_mod_count>
        <sys_name>GetDeploymentTasks</sys_name>
        <sys_package display_value="Deployer WORK IN PROGRESS" source="x_snc_deployer">394148f9db1c2d906a03dad1f396197a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Deployer WORK IN PROGRESS">394148f9db1c2d906a03dad1f396197a</sys_scope>
        <sys_update_name>sys_script_include_ff67b1ed97707550a6a07767f053afca</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-22 11:39:08</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>ff67b1ed97707550a6a07767f053afca</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-06-22 11:39:07</sys_created_on>
        <sys_id>9fe3e4e19312e250ae97b4aa6aba1090</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-22 11:39:07</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>

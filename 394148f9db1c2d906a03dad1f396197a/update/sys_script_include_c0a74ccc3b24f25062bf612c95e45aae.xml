<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_deployer.HeadlessDeployment</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The function performs a headless deployment to the given instance from the given repository and branch.</description>
        <mobile_callable>false</mobile_callable>
        <name>HeadlessDeployment</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function HeadlessDeployment(vInstance,strRepoUrl,strBranch)
{
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var IsValidUrl = x_snc_devtools.IsValidUrl;
	var IsValidSysId = x_snc_devtools.IsValidSysId;
	var GetRecord = x_snc_devtools.GetRecord;
	var GlideRecordUpdate = x_snc_devtools.GlideRecordUpdate;
	
	var progresstracker = new x_snc_devtools.ProgressTrackerAPI();
	progresstracker.Start();
	progresstracker.SetText('Checking parameters...');
	progresstracker.SetPercentageProgress(1);

	function Error(strMessage)
	{
		LogError('HeadlessDeployment: '+strMessage);
		progresstracker.SetResult(null,false,strMessage);
	}

	var grInstance = GetInstanceRecord(vInstance);
	if (IsValidRecord(grInstance) == false)
	{
		Error('Could not find instance!');
		return false;		
	}

	strRepoUrl = GetStringValue(strRepoUrl);
	if (IsValidUrl(strRepoUrl) == false)
	{
		Error('Repository URL is invalid.');
		return false;
	}

	strBranch = GetStringValue(strBranch);
	if (strBranch == '')
	{
		Error('No branch specified.');
		return false;
	}


	progresstracker.SetText('Validating Instance...');
	progresstracker.SetPercentageProgress(2);

	if (grInstance.pre_deployment_activities == true)
	{
		Error('Target Instance requires manual pre deployment activities!');
		return false;		
	}
	if (grInstance.smoke_test == true)
	{
		Error('Target Instance requires manual smoke test!');
		return false;		
	}
	if (grInstance.post_deployment_activities == true)
	{
		Error('Target Instance requires manual post deployment activities!');
		return false;		
	}
	if (grInstance.data_deletion_policy == 'confirm')
	{
		Error('Target Instance requires manual confirmation for potential data deletion!');
		return false;		
	}


	var bInstanceValid = TargetInstanceValidate(grInstance);
	if (bInstanceValid == false)
	{
		Error('Target Instance could not be validated!');
		return false;		
	}

	progresstracker.SetText('Repository Application Status...');
	progresstracker.SetPercentageProgress(10);

	var strRasSysId = TriggerNewRepositoyApplicationStatus(strRepoUrl,strBranch);
	if (IsValidSysId(strRasSysId) == false)
	{
		Error('Failed to trigger Repository Application Status!');
		return false;				
	}

	var grRAS = null;
	var bContinue = true;
	while (bContinue == true)
	{
		var grRAS = GetRecord(
			'x_snc_deployer_repository_application_status',
			strRasSysId);

		if (IsValidRecord(grRAS) == false)
		{
			Error('Failed load Repository Application Status record!');
			return false;				
		}

		if (grRAS.status == 'error')
		{
			Error('Repository Application Status returned an error!');
			return false;				
		}

		if (grRAS.status == 'ok')
		{
			bContinue = false;
		}
	}

	progresstracker.SetText('Preparing Deployment...');
	progresstracker.SetPercentageProgress(30);

	var grDeployment = CreateDeployment(grInstance,grRAS);
	if (IsValidRecord(grDeployment) == false)
	{
		Error('Failed to create deployment record!');
		return false;			
	}

	var bPrepared = CreateDeploymentTasksForDeployment(grDeployment);
	if (bPrepared == false)
	{
		Error('Failed to prepare deployment!');
		return false;			
	}

	grDeployment.state = GetDeploymentState('ready');
	GlideRecordUpdate(grDeployment,true);	

	progresstracker.SetText('Performing Deployment...');
	progresstracker.SetPercentageProgress(35);

	// TODO: start and wait for result

/*
	// Failure
	{
		Error('Deployment Failed!');
		return false;
	}
*/
	// Success
	progresstracker.SetResult(null,true,'Deployment Complete.');

	return true;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-10-07 14:06:44</sys_created_on>
        <sys_id>c0a74ccc3b24f25062bf612c95e45aae</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>HeadlessDeployment</sys_name>
        <sys_package display_value="Deployer WORK IN PROGRESS" source="x_snc_deployer">394148f9db1c2d906a03dad1f396197a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Deployer WORK IN PROGRESS">394148f9db1c2d906a03dad1f396197a</sys_scope>
        <sys_update_name>sys_script_include_c0a74ccc3b24f25062bf612c95e45aae</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-07 15:39:53</sys_updated_on>
        <x_snc_devtools_sys_ui_script/>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>c0a74ccc3b24f25062bf612c95e45aae</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-10-07 14:06:43</sys_created_on>
        <sys_id>bcd7cccc3b24f25062bf612c95e45aed</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-07 14:06:43</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_deployer.ExecuteRepositoryApplicationStatus</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Constructs the dependency tree, checks the availability of all required applications and stores the result in the given record.</description>
        <mobile_callable>false</mobile_callable>
        <name>ExecuteRepositoryApplicationStatus</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function ExecuteRepositoryApplicationStatus(grRepoAppStatus)
{
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var GetValue = x_snc_devtools.GetValue;
	var GetDependencyTreeErrorCount = x_snc_devtools.GetDependencyTreeErrorCount;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var ConfigurationItemServiceNowAppInsertOrUpdateFromTree = x_snc_devtools.ConfigurationItemServiceNowAppInsertOrUpdateFromTree;
	var Sleep = x_snc_devtools.Sleep;
	
	if (IsValidRecord(grRepoAppStatus) == false)
	{
		return false;
	}

	var strMode = GetStringValue(grRepoAppStatus.mode);
	var strVersion = GetStringValue(grRepoAppStatus.version);
	var strBranch = GetStringValue(grRepoAppStatus.branch);
	var strRepoUrl = GetStringValue(grRepoAppStatus.repo_url);

	// This is to make sure the timing for the first reload of the form works
	Sleep(3);
	// Can be removed once creating a RAS is a lengthy operation

	grRepoAppStatus.display = 'Processing '+strRepoUrl+' (branch '+strBranch+') in '+strMode+ ' mode';
	grRepoAppStatus.status = 'processing';
	grRepoAppStatus.errors = 0;
	grRepoAppStatus.dependency_tree_json = '';
	grRepoAppStatus.update();

	var grCredential = GetCredentialForRepository(strRepoUrl);
	if (grCredential == false)
	{
		grRepoAppStatus.display = 'No repository credential could be identified for the repository: '+strRepoUrl;
		grRepoAppStatus.status = 'error';
		grRepoAppStatus.update();
		return true;		
	}

	var strVersionOrBranch = '';
	if (strMode == 'deployment')
	{
		strVersionOrBranch = strVersion;
	}
	else if (strMode == 'preview')
	{
		strVersionOrBranch = strBranch;
	}
	else if (strMode == 'checkout')
	{
		strVersionOrBranch = strBranch;
	}
	else
	{
		grRepoAppStatus.display = 'Failed processing '+strRepoUrl+' in '+strMode+ ' mode';
		grRepoAppStatus.status = 'error';
		grRepoAppStatus.update();		
		return false;
	}

	
	var dependencytree = GetRepoDependencyTree(strRepoUrl,strMode,strVersionOrBranch);
	if (dependencytree == false)
	{
		grRepoAppStatus.display = 'Failed processing '+strRepoUrl+' for version '+strVersion;
		grRepoAppStatus.status = 'error';
		grRepoAppStatus.update();
		return true;	
	}

	if (strMode == 'preview')
	{
		grRepoAppStatus.display = GetValue(dependencytree,'name') + ' ' + GetValue(dependencytree,'version') + ' previewed branch "' + strBranch+ '" as of '+current.sys_created_on+' (UTC)';
		grRepoAppStatus.dependency_tree_json = JSON.stringify(dependencytree);
		grRepoAppStatus.status = 'previewed';
		grRepoAppStatus.errors = GetDependencyTreeErrorCount(dependencytree);
		grRepoAppStatus.update();
		return true;		
	}	
	
	if (strMode == 'deployment')
	{
		grRepoAppStatus.display =
			GetValue(dependencytree,'name')
			+ ' ' + strVersion + ' as of '+grRepoAppStatus.sys_created_on+' (UTC)';
	}
	else if (strMode == 'checkout')
	{
		grRepoAppStatus.display =
			'Check out ' + GetValue(dependencytree,'name')
			+ ' from "' + strBranch
			+ '" branch(es) as of '+grRepoAppStatus.sys_created_on+' (UTC)';
	}

	grRepoAppStatus.dependency_tree_json = JSON.stringify(dependencytree);
	var strStatus = GetValue(dependencytree,'dependency_status_summary');
	if (strStatus == 'ok')
	{
		grRepoAppStatus.status = 'ok';
	}
	else
	{
		grRepoAppStatus.status = 'error';
	}
	grRepoAppStatus.errors = GetDependencyTreeErrorCount(dependencytree);
	grRepoAppStatus.update();

	ConfigurationItemServiceNowAppInsertOrUpdateFromTree('',dependencytree);

	return true;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-05 13:17:15</sys_created_on>
        <sys_id>354a25aedbae4650f0f1d03cd3961982</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>ExecuteRepositoryApplicationStatus</sys_name>
        <sys_package display_value="Deployer WORK IN PROGRESS" source="x_snc_deployer">394148f9db1c2d906a03dad1f396197a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Deployer WORK IN PROGRESS">394148f9db1c2d906a03dad1f396197a</sys_scope>
        <sys_update_name>sys_script_include_354a25aedbae4650f0f1d03cd3961982</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-22 12:18:30</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>354a25aedbae4650f0f1d03cd3961982</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-06-22 12:09:54</sys_created_on>
        <sys_id>d6fae0a99312e250ae97b4aa6aba1027</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-22 12:09:54</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
